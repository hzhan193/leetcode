/**
 * this one is using backtracking to solve the problem but it has time limit.
 */
class Solution {
    boolean reach = false;
    public boolean canJump(int[] nums) {
        jump(nums, 0, nums.length - 1);
        
        return reach;
    }
    
    public void jump(int[] nums, int start, int target) {
        if(target <= 0) {
            reach = true;
            return;
        }
        for(int i = 1; i <= nums[start]; i++) {
            target -= i;
            jump(nums, start + i, target);
            target += i;
        }
    }
}


/**
 * use greedy to solve the problem.
 * find the current index and check if the current max length can reach the index or not
 * if the current index cannot be reached, then return false.
 * if the current index can be reached, update the max reached index, then increase the 
 * the current index.
 */
class Solution {
    
    public boolean canJump(int[] nums) {
        if(nums.length <= 1) return true;
        int maxReach = 0;
        
        // i represents the current index can be reached
        for(int i = 0; i < nums.length; i++) {
            if(maxReach < i) return false;
            //update the max lenth can be touched 
            maxReach = Math.max(maxReach, nums[i] + i);
        }
        return true;
    }
}
