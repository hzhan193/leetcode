class Solution {
    /**
     * i - the length of substring of s1.
     * j - the length of substring of s2.
     * i + j - the length of substring of s3.
     * --------------------------------------
     * dp[i][j] represents when the length of s1 is i, the 
     * length of s2 is j, the length of s3 is i + j, dp[i][j]
     * is interleaving of s1 and s2 or not.
     * if it is, the value is true, otherwise it is false.
     **/
    public boolean isInterleave(String s1, String s2, String s3) {
        int l1 = s1.length();
        int l2 = s2.length();
        if(s3.length() != l1 + l2) return false;
        
        boolean[][] dp = new boolean[l1 + 1][l2 + 1];
        
        for(int i = 0; i <= l1; i++) {
            for(int j = 0; j <= l2; j++) {
                if(i == 0 && j == 0) {
                    dp[i][j] = true;
                }else if(i == 0) {
                    dp[i][j] = dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);
                }else if(j == 0) {
                    dp[i][j] = dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);
                }else {
                    dp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) ||
                                (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
                }
            }
        }
        return dp[l1][l2];
    }
}
