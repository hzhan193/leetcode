class Solution {
    boolean[][] visited;
    public int numIslands(char[][] grid) {
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        //System.out.println("row is: " + row + ", and the col is: " + col);
        visited = new boolean[row][col];
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(!visited[i][j] && grid[i][j] == '1'){
                    count++;
                    dfs(i, j, grid);
                }
            }
        }
        
        return count;
    }
    
    public void dfs(int i, int j, char[][] grid) {
        if(i < 0 || j < 0) return;
        if(i == grid.length || j == grid[0].length) return;
        if(grid[i][j] == '0') return;
        if(visited[i][j]) return;
        
        visited[i][j] = true;
        
        dfs(i - 1, j, grid);
        dfs(i + 1, j, grid);
        dfs(i, j - 1, grid);
        dfs(i, j + 1, grid);
    }
}
