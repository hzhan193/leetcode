class Solution {
    public int maxDepth(Node root) {
        if(root == null) return 0;
        
        Queue<Node> queue = new LinkedList<>();
        Node node = null;
        int depth = 0;
        int size = 0;
        queue.add(root);
        while(!queue.isEmpty()) {
            size = queue.size();
            for(int i = 0; i < size; i++) {
                node = queue.remove();
                for(Node child : node.children) {
                    queue.add(child);
                }
            }
            depth++;
        }
        return depth;
    }
}

//recursion
class Solution {
    public int maxDepth(Node root) {
        if(root == null) return 0;
        return dfs(root) + 1;
    }
    public int dfs(Node node) {
        if(node.children == null) return 0;
        int max = 0;
        for(Node child : node.children) {
            //System.out.print(child.val);
            max = Math.max(dfs(child) + 1, max);
        }
        return max;
    }
}
