/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private List<Integer> sorted;
    public TreeNode balanceBST(TreeNode root) {
        sorted = new ArrayList<>();
        inOrder(root);
        //System.out.println(sorted);
        TreeNode node = constructBinaryTree(0, sorted.size() - 1);
        return node;
    }
    
    public void inOrder(TreeNode node) {
        if(node == null) return;
        
        inOrder(node.left);
        sorted.add(node.val);
        inOrder(node.right);
    }
    
    public TreeNode constructBinaryTree(int start, int end) {
        if(start > end) return null;
        
        int mid = (start + end) / 2;
        
        TreeNode node = new TreeNode(sorted.get(mid));
        node.left = constructBinaryTree(start, mid - 1);
        node.right = constructBinaryTree(mid + 1, end);
        
        return node;
    }
}
