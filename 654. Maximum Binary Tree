/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        int index = findMaxValueIndex(nums, 0, nums.length - 1);
        //System.out.println(index);
        TreeNode root = new TreeNode(nums[index]);
        root.left = maximumBinaryTree(nums, 0, index - 1);
        root.right = maximumBinaryTree(nums, index + 1, nums.length - 1);
        
        return root;
    }
    public TreeNode maximumBinaryTree(int[] nums, int left, int right){
        if(left > right || right > (nums.length - 1) || left < 0) return null;
        int index = findMaxValueIndex(nums, left, right);
        //System.out.println(index);
        TreeNode node = new TreeNode(nums[index]);
        node.left = maximumBinaryTree(nums, left, index - 1);
        node.right = maximumBinaryTree(nums, index + 1, right);
        
        return node;
    }
    public int findMaxValueIndex(int[] nums, int left, int right){
        int max = -1;
        int index = -1;
        for(int i = left; i <= right; i++){
            if(nums[i] > max){
                max = nums[i];
                index = i;
            }
        }
        return index;
    }
}
