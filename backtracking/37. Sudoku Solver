class Solution {
    public void solveSudoku(char[][] board) {
        char[] vals = {'1', '2', '3', '4', '5', '6', '7', '8', '9'};
        int row = board.length;
        int col = board[0].length;
        helper(board, vals);
    }
    
    public boolean helper(char[][] board, char[] vals){
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board.length; j++) {
                if(board[i][j] != '.') continue;
                for(char val : vals){
                    if(!isValid(board, i, j, val)) continue;
                    board[i][j] = val;
                    //print(board);
                    if(helper(board, vals)) return true; 
                    board[i][j] = '.';
                }
                return false;
            }
        }
        return true;
    }
    public boolean isValid(char[][] board, int row, int col, char c) {
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == c || 
                board[i][col] == c || 
                board[(row / 3) * 3 + i / 3][(col / 3) * 3 + i % 3] == c)
                return false;
        }
        return true;
    }
    public void print(char[][] board) {
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board.length; j++) {
                System.out.print(Character.toString(board[i][j]) + ' ');
            }
            System.out.println();
        }
        System.out.println("\n--------------------------------");
    }
}
