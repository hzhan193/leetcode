/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        //if(head == null || head.next == null) return head;
        ListNode slow = head;
        ListNode fast = head;
        //use fast slow pointers to locate the mid of the node 
        while(fast != null && fast.next != null){
            slow =  slow.next;
            fast = fast.next.next;
        }
        ListNode mid = slow;
        
        // start from the mid of the node, reverse the linked list 
        ListNode pre = null;
        ListNode current = mid;
        ListNode after = null;
        while(current != null){
            after = current.next;
            current.next = pre;
            pre = current;
            current = after;           
        }
        //check the value 
        while(head != null && pre != null){
            if(head.val != pre.val) return false;
            head = head.next;
            pre = pre.next;
        }
        return true;
    }
}
