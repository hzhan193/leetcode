/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null) return null;
        
        if(root.val == key) {
            if(root.left == null) {
                return root.right;
            }else if(root.right == null) {
                return root.left;
            }else if(root.right != null && root.left != null) {
                TreeNode min = minTreeNode(root.right);
                root.val = min.val;
                root.right = deleteNode(root.right, min.val);
            }
        }else if(key > root.val) {
            root.right = deleteNode(root.right, key);
        }else if(key < root.val) {
            root.left = deleteNode(root.left, key);
        }
        return root;
    }
    
    public TreeNode minTreeNode(TreeNode node) {
        TreeNode parent = null;
        while(node != null) {
            parent = node;
            node = node.left;
        }
        //System.out.println(parent.val);
        return parent;
    }
}
