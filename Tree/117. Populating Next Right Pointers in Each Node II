/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root == null) return null;
        
        Queue<Node> que = new LinkedList<>();
        int size = 0;
        que.add(root);
        
        while(!que.isEmpty()) {
            size = que.size();
            Node head = new Node();
            Node pre = head;
            while(size-- > 0) {
                Node node = que.poll();
                pre.next = node;
                pre = node;
                if(node.left != null) {
                    que.add(node.left);
                }
                if(node.right != null) {
                    que.add(node.right);
                }
            }
            pre.next = null;
            head.next = null;
        }
        return root;
    }
}
