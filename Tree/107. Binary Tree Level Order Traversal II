/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null) return ans;

        int size = 0;        
        queue.add(root);
        
        while(!queue.isEmpty()) {
            size = queue.size();
            List<Integer> lvl = new ArrayList<>();
            
            while(size-- > 0) {
                TreeNode node = queue.poll();
                lvl.add(node.val);
                if(node.left != null) {
                    queue.add(node.left);
                }
                if(node.right != null) {
                    queue.add(node.right);
                }
            }
            ans.add(lvl);
        }
        
        return reverse(ans);
    }
    
    public List<List<Integer>> reverse(List<List<Integer>> list) {
        List<List<Integer>> reversed = new ArrayList<>();
        
        for(int i = list.size() - 1; i >= 0; i--) {
            reversed.add(list.get(i));
        }
        
        return reversed;
    }
}
