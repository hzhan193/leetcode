/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        int size = 0;
        int lvlMax = Integer.MIN_VALUE;
        
        if(root == null) return ans;
        
        queue.add(root);
        while(!queue.isEmpty()) {
            size = queue.size();
            
            while(size-- > 0) {
                TreeNode node = queue.poll();
                int cur = node.val;
                if(node.left != null) {
                    queue.add(node.left);
                }
                if(node.right != null) {
                    queue.add(node.right);
                }
                if(cur > lvlMax) {
                    lvlMax = cur;
                }
            }
            ans.add(lvlMax);
            lvlMax = Integer.MIN_VALUE;
        }
        return ans;
    }
}
