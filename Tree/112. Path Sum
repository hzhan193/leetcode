class Solution {
    private boolean find = false;
    public boolean hasPathSum(TreeNode root, int targetSum) {
        helper(root, targetSum);
        return find;
    }
    public void helper(TreeNode node, int sum) {
        if(node == null) return;
        //System.out.println(node.val + ", " + sum);
        if(node.left == null && node.right == null && sum == node.val){
            find = true;
            return;
        }
        helper(node.left, sum - node.val);
        helper(node.right, sum - node.val);
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null) return false;
        if(root.left == null root.right == null && targetSum == root.val) return true;
        
        return hasPathSum(root.left, targetSum - root.val) ||
               hasPathSum(root.right, targetSum - root.val);
    }
}
